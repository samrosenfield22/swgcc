; grammar for the c programming language, sort of
; by default, the token on the lhs of the first production is the start symbol

<stmtlist>		::= <stmt>
<stmtlist>		::= "{" <stmt>* "}"
<stmt>			::= <comma> ";"
<stmt>			::= <decl> ";"
<stmt>			::= <if>
<stmt>			::= <while>
<stmt>			::= <dowhile>
<stmt>			::= <for>

<decl>			::= type <mdecl> <moredecl>*
<moredecl>		::= "," <mdecl>
<mdecl>			::= <base_id> <decl_assign>?
<decl_assign>	::= "=" <assign> {=}

<comma>       	::= <assign> <mcomma>*
<mcomma>      	::= "," <assign> {,}

<if>			::= "if" "(" <comma> ")" <stmtlist> <else>?
<else>			::= "else" <stmtlist>
<while>			::= "while" "(" <comma> ")" <stmtlist>
<dowhile>		::= "do" <stmtlist> "while" "(" <comma> ")"
<for>			::= "for" "(" <stmt> ";" <comma> ";" <comma> ")" <stmtlist>


<assign>		::= <logical> <massign>?
<massign> ::= "=" <assign> {=}
<massign> ::= "+=" <assign> {+=}
<massign> ::= "-=" <assign> {-=}
<massign> ::= "*=" <assign> {*=}
<massign> ::= "/=" <assign> {/=}
<massign> ::= "%=" <assign> {%=}
<massign> ::= "<<=" <assign> {<<=}
<massign> ::= ">>=" <assign> {>>=}
<massign> ::= "&=" <assign> {&=}
<massign> ::= "|=" <assign> {|=}
<massign> ::= "^=" <assign> {^=}


<logical>     ::= <bitwise> <mlogical>*
<mlogical>    ::= "&&" <bitwise> {&&}
<mlogical>    ::= "||" <bitwise> {||}

<bitwise>     ::= <equality> <mbitwise>*
<mbitwise>    ::= "&" <equality> {&}
<mbitwise>    ::= "|" <equality> {|}
<mbitwise>    ::= "^" <equality> {^}

<equality>    ::= <relational> <mequality>*
<mequality>   ::= "==" <equality> {==}
<mequality>   ::= "!=" <equality> {!=}

<relational>  ::= <shift> <mrelational>*
<mrelational> ::= ">" <shift> {>}
<mrelational> ::= ">=" <shift> {>=}
<mrelational> ::= "<" <shift> {<}
<mrelational> ::= "<=" <shift> {<=}

<shift>       ::= <sum> <mshift>*
<mshift>      ::= "<<" <sum> {<<}
<mshift>      ::= ">>" <sum> {>>}

<sum>			::= <prod> <msum>*
<msum>			::= "+" <prod> {+}
<msum>			::= "-" <prod> {-}

<prod>        ::= <misc2> <mprod>*
<mprod>       ::= "*" <misc2> {*}
<mprod>       ::= "/" <misc2> {/}
<mprod>       ::= "%" <misc2> {%}

<misc2>			::= <misc1>
<misc2>			::= <misc2_lval>
<misc2>			::= <misc2_context>
<misc2>			::= "!" <misc2> {!}
<misc2>			::= "~" <misc2> {~}
<misc2_context>	::= "&" <misc1> {&addr}
<misc2_context>	::= "++" <misc1> {++pre}
<misc2_context>	::= "--" <misc1> {--pre}
<misc2_lval>	::= "*" <misc2> {*deref}

;<misc1>			::= <base>

<misc1>			::= <misc1_context>
<misc1>			::= <base_num>
<misc1_context>	::= <base_id> <m_misc1>?
<misc1_context>	::= <base_expr> <m_misc1>?
<m_misc1>		::= "++" {++post}
<m_misc1>		::= "--" {--post}

<base>			::= <base_id>
<base>			::= <base_num>
<base>			::= <base_expr>

;<base>			::= <base_num>
;<base>			::= <base_expr>

;<base_expr>		::= <base_other>
;<base_num>		::= <base_other>

<base_id>		::= id {push %s}
<base_num>		::= num {push %s}
<base_expr>		::= "(" <comma> ")"

;<base_other>	::= num {push %s}
;<base_other>		::= "(" <comma> ")"
