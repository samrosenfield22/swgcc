;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; grammar for the c programming language, sort of							   ;;;;;
;;;;; by default, the token on the lhs of the first production is the start symbol ;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;jump id 	meaning
;0 			function postamble
;1,2		misc conditionals
;3 			ret from function call

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; top-level productions

<stmtlist>		::= <stmt>
<stmtlist>		::= <block>
<block>			::= "{" {! alloc_lcls} <stmtlist>* {! free_lcls} {! seqpt} "}"

<stmt>			::= <mstmt>
<stmt>			::= <if>
<stmt>			::= <while>
<stmt>			::= <dowhile>
<stmt>			::= <forloop>
<stmt>			::= "return" <comma> ";" {pop eax} {pushaddr 0} {jmp}

<mstmt>			::= <comma> ";" {! seqpt} {pop}
<mstmt>			::= <decl>

;
;
; this grammar mandates that functions have a ; after the block (i.e.)
; int fn(void) {return 5;};
; the type of declarator determines whether the <opt_assign> is a variable/array assign (or multiple)(ends w semicolon)
; or if it's a function block (no semicolon)
;
; if the lextok after the declarator is a "{", it's a function
; if the lextok is "=", ",", ";", it's a var
;
;<decl>			::= type <full_dcltor> <first_assign>
;<first_assign>	::= <opt_assign>? <more_declare>* ";"
;<first_assign>	::= <funcdef>
;
;
; i think the parser doesn't like the repeat expression
; <opt_assign>? <more_declare>*

<decl>			::= type {! add_decl_var parent.full_dcltor} <full_dcltor> {! handle_lvcontext parent.full_dcltor} <first_assign>
<first_assign>	::= <opt_assign> <more_declare>* ";" {! seqpt} {pop}
<first_assign>	::= <more_declare>* ";" {! seqpt} {pop}
<first_assign>	::= ";" {! seqpt} {pop}
<first_assign>	::= <funcdef> {! define_function parent.parent.full_dcltor}


;<decl>			::= type <declare> <more_declare>* ";" {! seqpt} {pop}
<declare>		::= {! add_decl_var parent.full_dcltor} <full_dcltor> {! handle_lvcontext parent.full_dcltor} <opt_assign>?
<more_declare>	::= "," {pop} <declare>

<full_dcltor>	::= <dcltor> {! seqpt}
<dcltor>		::= <dclptr>* <dcltor>
<dcltor>		::= <base_id> <dclsuffix>?
<dclsuffix>		::= "(" <funcdeflist> ")"
<dclsuffix>		::= <dclarr>*
<dclptr>		::= "*"
<dclarr>		::= "[" "]"

<opt_assign>	::= "=" <assign> {=}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; conditionals

<if>			::= "if" "(" <comma> ")" {pushaddr 1} {jz} <stmtlist> {jumplabel 1}

<while>			::= "while" "(" {pushaddr 1} {jmp} {jumplabel 2} <comma> ")" {jumplabel 1} <stmtlist> {pushaddr 2} {jnz} {! swap_nodes parent.comma, parent.stmtlist}

<dowhile>		::= "do" {jumplabel 1} <stmtlist> "while" "(" <comma> ")" {pushaddr 1} {jnz}

<forloop>		::= "for" "(" <mstmt>? {pushaddr 1} {jmp} {jumplabel 2} <comma>? ";" {! seqpt} <comma>? {! seqpt} {pop} {jumplabel 1} ")" <stmtlist> {pushaddr 2} {jnz} {! swap_nodes parent.comma, parent.stmtlist}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; functions

;if the function contains a return statement, this stores the return value in eax, then jumps to jumplabel 0,
;skipping the {push 0} {pop eax}
;if execution reaches the end of the block (without hitting a return statement), then we set eax=0
<funcdef>		::= {! seqpt} {enter} <block> {push 0} {pop eax} {jumplabel 0} {leave} {ret}
<funcdeflist>	::= "void"
<funcdeflist>	::= <funcdefarg> <mfuncdefarg>*
<funcdefarg>	::= type {! add_decl_var parent.full_dcltor} <full_dcltor>
<mfuncdefarg>	::= "," <funcdefarg>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; expressions (arithmetic, logical, bitwise, assignment)

<comma>       	::= <assign> <mcomma>*
<mcomma>      	::= "," {pop} <assign> {,}

<assign>		::= <logical> <massign>?
<massign> 		::= "=" <assign> {=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "+=" <assign> {+=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "-=" <assign> {-=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "*=" <assign> {*=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "/=" <assign> {/=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "%=" <assign> {%=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "<<=" <assign> {<<=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= ">>=" <assign> {>>=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "&=" <assign> {&=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "|=" <assign> {|=} {! handle_lvcontext parent.parent.logical}
<massign> 		::= "^=" <assign> {^=} {! handle_lvcontext parent.parent.logical}


<logical>		::= <bitwise> <mlogical>*
<mlogical>    	::= "&&" <bitwise> {&&}
<mlogical>    	::= "||" <bitwise> {||}

<bitwise>     	::= <equality> <mbitwise>*
<mbitwise>    	::= "&" <equality> {&}
<mbitwise>    	::= "|" <equality> {|}
<mbitwise>    	::= "^" <equality> {^}

<equality>    	::= <relational> <mequality>*
<mequality>   	::= "==" <equality> {==}
<mequality>   	::= "!=" <equality> {!=}

<relational>  	::= <shift> <mrelational>*
<mrelational> 	::= ">" <shift> {>}
<mrelational> 	::= ">=" <shift> {>=}
<mrelational> 	::= "<" <shift> {<}
<mrelational> 	::= "<=" <shift> {<=}

<shift>       	::= <sum> <mshift>*
<mshift>      	::= "<<" <sum> {<<}
<mshift>      	::= ">>" <sum> {>>}

<sum>			::= <prod> <msum>*
<msum>			::= "+" <prod> {+}
<msum>			::= "-" <prod> {-}

<prod>        	::= <misc2> <mprod>*
<mprod>       	::= "*" <misc2> {*}
<mprod>       	::= "/" <misc2> {/}
<mprod>       	::= "%" <misc2> {%}

<misc2>			::= <misc1>
<misc2>			::= <misc2_lval>
<misc2>			::= <misc2_context>
<misc2>			::= "!" <misc2> {!}
<misc2>			::= "~" <misc2> {~}
<misc2_context>	::= "&" <misc1> {&addr} {! handle_lvcontext parent.misc1}
<misc2_context>	::= "++" <misc1> {++pre} {! handle_lvcontext parent.misc1}
<misc2_context>	::= "--" <misc1> {--pre} {! handle_lvcontext parent.misc1}
<misc2_lval>	::= "*" <misc2> {*deref}

<misc1>			::= <misc1_context>
<misc1>			::= <base_num>
<misc1_context>	::= <base_id> <m_misc1>?
<misc1_context>	::= <base_expr> <m_misc1>?
<m_misc1>		::= "++" {! handle_lvcontext parent.parent.0} {++post}
<m_misc1>		::= "--" {! handle_lvcontext parent.parent.0} {--post}
<m_misc1>		::= "(" <arglist>? <fcall> {! check_args parent.parent.0.0, parent.arglist}
<fcall>			::= ")" {pushaddr 3} {nop} {jmp} {jumplabel 3} {! clean_args parent.parent.parent.0.0} {pushv eax} {! handle_lvcontext parent.parent.parent.0} {! swap_nodes parent.2, parent.parent.parent.0}
<arglist>		::= <assign> <margs>* {! reverse_args parent}
<margs>			::= "," <assign>

<base_id>		::= id {! check_decl_var parent.0} {! make_push parent}
<base_num>		::= num {! make_push parent}
<base_expr>		::= "(" <comma> ")"

